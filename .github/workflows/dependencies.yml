###############################################################
# Copyright (c) 2025 Contributors to the Eclipse Foundation
#
# See the NOTICE file(s) distributed with this work for additional
# information regarding copyright ownership.
#
# This program and the accompanying materials are made available under the
# terms of the Apache License, Version 2.0 which is available at
# https://www.apache.org/licenses/LICENSE-2.0.
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.
#
# SPDX-License-Identifier: Apache-2.0
###############################################################

name: "Eclipse DASH IP Check"

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

env:
  POETRY_HOME_UNIX: /opt/poetry
  POETRY_HOME_WINDOWS: C:\poetry
  POETRY_VERSION: 2.0.0

jobs:
  check-dependencies-backend-unix:
    runs-on: ubuntu-latest

    steps:

      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Set up JDK 21
        uses: actions/setup-java@3a4f6e1af504cf6a31855fa899c6aa5355ba6c12 # v4.7.0
        with:
          distribution: 'temurin'
          java-version: '21'
    
      - name: Set up Python
        uses: actions/setup-python@42375524e23c412d93fb67b49958b491fce71c38 # v5.4.0
        with:
            python-version: '3.12'

      # We don't need to create a python virtual environment because Poetry already handles it for us
      # Poetry is installed in a separate virtual environment because it is highly recommended
      # https://python-poetry.org/docs/#ci-recommendations
      - name: Create a venv for Poetry and install Poetry
        run: |
          python3 -m venv $POETRY_HOME_UNIX
          $POETRY_HOME_UNIX/bin/pip install poetry==$POETRY_VERSION
          $POETRY_HOME_UNIX/bin/poetry --version

      # Poetry sync is preferred over install because it makes sure to be in sync with the poetry.lock file
      # We use --no-root to avoid installing the current package in the virtual environment
      # If the poetry.lock file is not present, we use install as a fallback
      - name: Install dependencies
        run: |
          if [ -f poetry.lock ]; then
            $POETRY_HOME_UNIX/bin/poetry sync --no-root
          else
            $POETRY_HOME_UNIX/bin/poetry install --no-root
          fi

      - name: List packages
        run: |
             $POETRY_HOME_UNIX/bin/poetry run pip list --format=freeze | grep -Pv "^(pip|setuptools|wheel|virtualenv|distlib|pkg_resources)" | awk -F'==' '{print "pypi/pypi/-/" $1 "/" $2}' | awk '!seen[$0]++' > PACKAGE

      - name: Generate Dependencies file
        run: |
            curl -L --output ./dash.jar 'https://repo.eclipse.org/service/local/artifact/maven/redirect?r=dash-licenses&g=org.eclipse.dash&a=org.eclipse.dash.licenses&v=LATEST'
            
            DEP_FILE="DEPENDENCIES_TRACTUS-X_SDK"

            echo "DEP_FILE=$DEP_FILE" >> $GITHUB_ENV

            java -jar ./dash.jar PACKAGE -project automotive.tractusx -summary $DEP_FILE || true

      - name: Check if dependencies were changed
        id: dependencies-changed
        run: |
            if git diff --exit-code $DEP_FILE; then
                echo "changed=false" >> $GITHUB_OUTPUT
            else
                echo "changed=true" >> $GITHUB_OUTPUT
                echo "Change the $DEP_FILE with this new dependencies"
                cat $DEP_FILE
                exit 1
            fi

      - name: Check for restricted dependencies
        run: |
            restricted=$(grep 'restricted' $DEP_FILE || true)
            if [[ -n "$restricted" ]]; then
                echo "The following dependencies are restricted: $restricted"
                exit 1
            fi

      - name: Upload $DEP_FILE file
        uses: actions/upload-artifact@65c4c4a1ddee5b72f698fdd19549f0f0fb45cf08 # v4.6.0
        with:
            path: $DEP_FILE

  check-dependencies-backend-windows:
      runs-on: windows-latest
      defaults:
            run:
              shell: pwsh
      steps:

        - name: Checkout repository
          uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

        - name: Set up JDK 21
          uses: actions/setup-java@3a4f6e1af504cf6a31855fa899c6aa5355ba6c12 # v4.7.0
          with:
            distribution: 'temurin'
            java-version: '21'
      
        - name: Set up Python
          uses: actions/setup-python@42375524e23c412d93fb67b49958b491fce71c38 # v5.4.0
          with:
              python-version: '3.12'

        # We don't need to create a python virtual environment because Poetry already handles it for us
        # Poetry is installed in a separate virtual environment because it is highly recommended
        # https://python-poetry.org/docs/#ci-recommendations
        - name: Create a venv for Poetry and install Poetry - Pwsh version
          run: |
            python -m venv $env:POETRY_HOME_WINDOWS
            & "$env:POETRY_HOME_WINDOWS\Scripts\pip" install poetry==$env:POETRY_VERSION
            & "$env:POETRY_HOME_WINDOWS\Scripts\poetry" --version


        # Poetry sync is preferred over install because it makes sure to be in sync with the poetry.lock file
        # We use --no-root to avoid installing the current package in the virtual environment
        # If the poetry.lock file is not present, we use install as a fallback
        - name: Install dependencies - Pwsh version
          run: |
            if (Test-Path poetry.lock) {
              & "$env:POETRY_HOME_WINDOWS\Scripts\poetry" sync --no-root
            } 
            else {
              & "$env:POETRY_HOME_WINDOWS\Scripts\poetry" install --no-root
            }

        - name: List packages - Pwsh version
          run: |
              & "$env:POETRY_HOME_WINDOWS\Scripts\poetry" run pip list --format=freeze | 
              Where-Object { $_ -notmatch '^(pip|setuptools|wheel|virtualenv|distlib|pkg_resources)' } | 
              ForEach-Object { 
                $parts = $_ -split '=='
                "pypi/pypi/-/$($parts[0])/$($parts[1])"
              } | 
              Get-Unique | 
              Out-File -FilePath PACKAGE

        - name: Generate Dependencies file - Pwsh version
          run: |
              Invoke-WebRequest -Uri 'https://repo.eclipse.org/service/local/artifact/maven/redirect?r=dash-licenses&g=org.eclipse.dash&a=org.eclipse.dash.licenses&v=LATEST' -OutFile .\dash.jar

              $DEP_FILE = "DEPENDENCIES_TRACTUS-X_SDK"

              echo "DEP_FILE=$DEP_FILE" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

              java -jar .\dash.jar PACKAGE -project automotive.tractusx -summary $DEP_FILE
              if ($LASTEXITCODE -ne 0) { $LASTEXITCODE = 0 }

        - name: Check if dependencies were changed - Pwsh version
          id: dependencies-changed
          run: |
              git diff --exit-code $env:DEP_FILE
              if ($LASTEXITCODE -eq 0) {
                  echo "changed=false" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
              } else {
                  echo "changed=true" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
                  echo "Change the $env:DEP_FILE with these new dependencies"
                  Get-Content $env:DEP_FILE
                  exit 1
              }

        - name: Check for restricted dependencies - Pwsh version
          run: |
              $restricted = Select-String -Path $env:DEP_FILE -Pattern 'restricted' -ErrorAction SilentlyContinue
              if ($restricted) {
                  Write-Error "The following dependencies are restricted: $restricted"
                  exit 1
              }

        - name: Upload dependency file - Pwsh version
          uses: actions/upload-artifact@65c4c4a1ddee5b72f698fdd19549f0f0fb45cf08 # v4.6.0
          with:
            path: ${{ env.DEP_FILE }}
